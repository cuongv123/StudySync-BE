import { MigrationInterface, QueryRunner } from "typeorm";

export class AddRoleToGroupMembers1759739640519 implements MigrationInterface {
    name = 'AddRoleToGroupMembers1759739640519'

    public async up(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(`ALTER TABLE "tokens" DROP CONSTRAINT "tokens_userId_fkey"`);
        await queryRunner.query(`ALTER TABLE "group_members" DROP CONSTRAINT "group_members_groupId_fkey"`);
        await queryRunner.query(`ALTER TABLE "group_members" DROP CONSTRAINT "group_members_userId_fkey"`);
        await queryRunner.query(`ALTER TABLE "group_invitations" DROP CONSTRAINT "fk_invitee_email"`);
        await queryRunner.query(`ALTER TABLE "group_invitations" DROP CONSTRAINT "group_invitations_groupId_fkey"`);
        await queryRunner.query(`ALTER TABLE "group_invitations" DROP CONSTRAINT "group_invitations_inviterId_fkey"`);
        await queryRunner.query(`ALTER TABLE "study_groups" DROP CONSTRAINT "study_groups_leaderId_fkey"`);
        await queryRunner.query(`DROP INDEX "public"."idx_users_email"`);
        await queryRunner.query(`DROP INDEX "public"."idx_users_username"`);
        await queryRunner.query(`DROP INDEX "public"."idx_tokens_userid"`);
        await queryRunner.query(`DROP INDEX "public"."idx_group_members_groupid"`);
        await queryRunner.query(`DROP INDEX "public"."idx_group_members_userid"`);
        await queryRunner.query(`DROP INDEX "public"."idx_group_invitations_groupid"`);
        await queryRunner.query(`DROP INDEX "public"."idx_group_invitations_inviteeemail"`);
        await queryRunner.query(`DROP INDEX "public"."idx_group_invitations_status"`);
        await queryRunner.query(`DROP INDEX "public"."idx_study_groups_leaderid"`);
        await queryRunner.query(`DROP INDEX "public"."idx_study_groups_isactive"`);
        await queryRunner.query(`ALTER TABLE "group_members" DROP CONSTRAINT "group_members_groupId_userId_key"`);
        await queryRunner.query(`ALTER TABLE "group_members" DROP COLUMN "isLeader"`);
        await queryRunner.query(`ALTER TABLE "group_invitations" DROP COLUMN "inviterId"`);
        await queryRunner.query(`ALTER TABLE "group_invitations" DROP COLUMN "inviteeEmail"`);
        await queryRunner.query(`ALTER TABLE "group_invitations" DROP COLUMN "invitedAt"`);
        await queryRunner.query(`ALTER TABLE "group_invitations" DROP COLUMN "respondedAt"`);
        await queryRunner.query(`ALTER TABLE "group_invitations" DROP COLUMN "expiresAt"`);
        await queryRunner.query(`CREATE TYPE "public"."group_members_role_enum" AS ENUM('leader', 'moderator', 'member')`);
        await queryRunner.query(`ALTER TABLE "group_members" ADD "role" "public"."group_members_role_enum" NOT NULL DEFAULT 'member'`);
        await queryRunner.query(`ALTER TABLE "group_invitations" ADD "invitedUserId" uuid NOT NULL`);
        await queryRunner.query(`ALTER TABLE "group_invitations" ADD "invitedByUserId" uuid NOT NULL`);
        await queryRunner.query(`ALTER TABLE "group_invitations" ADD "message" text`);
        await queryRunner.query(`ALTER TABLE "group_invitations" ADD "createdAt" TIMESTAMP NOT NULL DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "group_invitations" ADD "updatedAt" TIMESTAMP NOT NULL DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "users" DROP CONSTRAINT "users_email_key"`);
        await queryRunner.query(`ALTER TABLE "users" DROP COLUMN "email"`);
        await queryRunner.query(`ALTER TABLE "users" ADD "email" character varying NOT NULL`);
        await queryRunner.query(`ALTER TABLE "users" ADD CONSTRAINT "UQ_97672ac88f789774dd47f7c8be3" UNIQUE ("email")`);
        await queryRunner.query(`ALTER TABLE "users" DROP CONSTRAINT "users_username_key"`);
        await queryRunner.query(`ALTER TABLE "users" DROP COLUMN "username"`);
        await queryRunner.query(`ALTER TABLE "users" ADD "username" character varying NOT NULL`);
        await queryRunner.query(`ALTER TABLE "users" ADD CONSTRAINT "UQ_fe0bb3f6520ee0469504521e710" UNIQUE ("username")`);
        await queryRunner.query(`ALTER TABLE "users" DROP COLUMN "password"`);
        await queryRunner.query(`ALTER TABLE "users" ADD "password" character varying NOT NULL`);
        await queryRunner.query(`ALTER TABLE "users" ALTER COLUMN "isVerified" SET NOT NULL`);
        await queryRunner.query(`ALTER TYPE "public"."user_role_enum" RENAME TO "user_role_enum_old"`);
        await queryRunner.query(`CREATE TYPE "public"."users_role_enum" AS ENUM('admin', 'user')`);
        await queryRunner.query(`ALTER TABLE "users" ALTER COLUMN "role" DROP DEFAULT`);
        await queryRunner.query(`ALTER TABLE "users" ALTER COLUMN "role" TYPE "public"."users_role_enum"[] USING "role"::"text"::"public"."users_role_enum"[]`);
        await queryRunner.query(`ALTER TABLE "users" ALTER COLUMN "role" SET DEFAULT '{user}'`);
        await queryRunner.query(`DROP TYPE "public"."user_role_enum_old"`);
        await queryRunner.query(`ALTER TABLE "users" ALTER COLUMN "role" SET NOT NULL`);
        await queryRunner.query(`ALTER TABLE "users" ALTER COLUMN "isActive" SET NOT NULL`);
        await queryRunner.query(`ALTER TABLE "users" ALTER COLUMN "createdAt" SET NOT NULL`);
        await queryRunner.query(`ALTER TABLE "users" ALTER COLUMN "updatedAt" SET NOT NULL`);
        await queryRunner.query(`ALTER TABLE "tokens" ALTER COLUMN "refeshtokenused" SET NOT NULL`);
        await queryRunner.query(`ALTER TABLE "tokens" DROP COLUMN "accessToken"`);
        await queryRunner.query(`ALTER TABLE "tokens" ADD "accessToken" character varying NOT NULL`);
        await queryRunner.query(`ALTER TABLE "tokens" DROP COLUMN "refreshToken"`);
        await queryRunner.query(`ALTER TABLE "tokens" ADD "refreshToken" character varying NOT NULL`);
        await queryRunner.query(`ALTER TABLE "group_members" ALTER COLUMN "userId" SET NOT NULL`);
        await queryRunner.query(`ALTER TABLE "group_members" ALTER COLUMN "groupId" SET NOT NULL`);
        await queryRunner.query(`ALTER TABLE "group_members" ALTER COLUMN "joinedAt" SET NOT NULL`);
        await queryRunner.query(`ALTER TABLE "group_invitations" ALTER COLUMN "groupId" SET NOT NULL`);
        await queryRunner.query(`ALTER TYPE "public"."invitation_status" RENAME TO "invitation_status_old"`);
        await queryRunner.query(`CREATE TYPE "public"."group_invitations_status_enum" AS ENUM('pending', 'accepted', 'declined', 'cancelled')`);
        await queryRunner.query(`ALTER TABLE "group_invitations" ALTER COLUMN "status" DROP DEFAULT`);
        await queryRunner.query(`ALTER TABLE "group_invitations" ALTER COLUMN "status" TYPE "public"."group_invitations_status_enum" USING "status"::"text"::"public"."group_invitations_status_enum"`);
        await queryRunner.query(`ALTER TABLE "group_invitations" ALTER COLUMN "status" SET DEFAULT 'pending'`);
        await queryRunner.query(`DROP TYPE "public"."invitation_status_old"`);
        await queryRunner.query(`ALTER TABLE "group_invitations" ALTER COLUMN "status" SET NOT NULL`);
        await queryRunner.query(`ALTER TABLE "study_groups" ALTER COLUMN "leaderId" SET NOT NULL`);
        await queryRunner.query(`ALTER TABLE "study_groups" ALTER COLUMN "storageLimitMb" SET NOT NULL`);
        await queryRunner.query(`ALTER TABLE "study_groups" DROP COLUMN "totalStorageUsedMb"`);
        await queryRunner.query(`ALTER TABLE "study_groups" ADD "totalStorageUsedMb" integer NOT NULL DEFAULT '0'`);
        await queryRunner.query(`ALTER TABLE "study_groups" ALTER COLUMN "isActive" SET NOT NULL`);
        await queryRunner.query(`ALTER TABLE "study_groups" ALTER COLUMN "createdAt" SET NOT NULL`);
        await queryRunner.query(`ALTER TABLE "study_groups" ALTER COLUMN "updatedAt" SET NOT NULL`);
        await queryRunner.query(`ALTER TABLE "tokens" ADD CONSTRAINT "FK_d417e5d35f2434afc4bd48cb4d2" FOREIGN KEY ("userId") REFERENCES "users"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "group_members" ADD CONSTRAINT "FK_fdef099303bcf0ffd9a4a7b18f5" FOREIGN KEY ("userId") REFERENCES "users"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "group_members" ADD CONSTRAINT "FK_1aa8d31831c3126947e7a713c2b" FOREIGN KEY ("groupId") REFERENCES "study_groups"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "group_invitations" ADD CONSTRAINT "FK_cb09a4fab35f248028d28765777" FOREIGN KEY ("invitedUserId") REFERENCES "users"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "group_invitations" ADD CONSTRAINT "FK_5744775a2e00bd587f5d2ba970f" FOREIGN KEY ("invitedByUserId") REFERENCES "users"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "group_invitations" ADD CONSTRAINT "FK_ab934a07e81281d8da148ee641b" FOREIGN KEY ("groupId") REFERENCES "study_groups"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "study_groups" ADD CONSTRAINT "FK_fd5db0415d49c217aed4a1b3122" FOREIGN KEY ("leaderId") REFERENCES "users"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
    }

    public async down(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(`ALTER TABLE "study_groups" DROP CONSTRAINT "FK_fd5db0415d49c217aed4a1b3122"`);
        await queryRunner.query(`ALTER TABLE "group_invitations" DROP CONSTRAINT "FK_ab934a07e81281d8da148ee641b"`);
        await queryRunner.query(`ALTER TABLE "group_invitations" DROP CONSTRAINT "FK_5744775a2e00bd587f5d2ba970f"`);
        await queryRunner.query(`ALTER TABLE "group_invitations" DROP CONSTRAINT "FK_cb09a4fab35f248028d28765777"`);
        await queryRunner.query(`ALTER TABLE "group_members" DROP CONSTRAINT "FK_1aa8d31831c3126947e7a713c2b"`);
        await queryRunner.query(`ALTER TABLE "group_members" DROP CONSTRAINT "FK_fdef099303bcf0ffd9a4a7b18f5"`);
        await queryRunner.query(`ALTER TABLE "tokens" DROP CONSTRAINT "FK_d417e5d35f2434afc4bd48cb4d2"`);
        await queryRunner.query(`ALTER TABLE "study_groups" ALTER COLUMN "updatedAt" DROP NOT NULL`);
        await queryRunner.query(`ALTER TABLE "study_groups" ALTER COLUMN "createdAt" DROP NOT NULL`);
        await queryRunner.query(`ALTER TABLE "study_groups" ALTER COLUMN "isActive" DROP NOT NULL`);
        await queryRunner.query(`ALTER TABLE "study_groups" DROP COLUMN "totalStorageUsedMb"`);
        await queryRunner.query(`ALTER TABLE "study_groups" ADD "totalStorageUsedMb" numeric(10,2) DEFAULT '0'`);
        await queryRunner.query(`ALTER TABLE "study_groups" ALTER COLUMN "storageLimitMb" DROP NOT NULL`);
        await queryRunner.query(`ALTER TABLE "study_groups" ALTER COLUMN "leaderId" DROP NOT NULL`);
        await queryRunner.query(`ALTER TABLE "group_invitations" ALTER COLUMN "status" DROP NOT NULL`);
        await queryRunner.query(`CREATE TYPE "public"."invitation_status_old" AS ENUM('pending', 'accepted', 'denied')`);
        await queryRunner.query(`ALTER TABLE "group_invitations" ALTER COLUMN "status" DROP DEFAULT`);
        await queryRunner.query(`ALTER TABLE "group_invitations" ALTER COLUMN "status" TYPE "public"."invitation_status_old" USING "status"::"text"::"public"."invitation_status_old"`);
        await queryRunner.query(`ALTER TABLE "group_invitations" ALTER COLUMN "status" SET DEFAULT 'pending'`);
        await queryRunner.query(`DROP TYPE "public"."group_invitations_status_enum"`);
        await queryRunner.query(`ALTER TYPE "public"."invitation_status_old" RENAME TO "invitation_status"`);
        await queryRunner.query(`ALTER TABLE "group_invitations" ALTER COLUMN "groupId" DROP NOT NULL`);
        await queryRunner.query(`ALTER TABLE "group_members" ALTER COLUMN "joinedAt" DROP NOT NULL`);
        await queryRunner.query(`ALTER TABLE "group_members" ALTER COLUMN "groupId" DROP NOT NULL`);
        await queryRunner.query(`ALTER TABLE "group_members" ALTER COLUMN "userId" DROP NOT NULL`);
        await queryRunner.query(`ALTER TABLE "tokens" DROP COLUMN "refreshToken"`);
        await queryRunner.query(`ALTER TABLE "tokens" ADD "refreshToken" text NOT NULL`);
        await queryRunner.query(`ALTER TABLE "tokens" DROP COLUMN "accessToken"`);
        await queryRunner.query(`ALTER TABLE "tokens" ADD "accessToken" text NOT NULL`);
        await queryRunner.query(`ALTER TABLE "tokens" ALTER COLUMN "refeshtokenused" DROP NOT NULL`);
        await queryRunner.query(`ALTER TABLE "users" ALTER COLUMN "updatedAt" DROP NOT NULL`);
        await queryRunner.query(`ALTER TABLE "users" ALTER COLUMN "createdAt" DROP NOT NULL`);
        await queryRunner.query(`ALTER TABLE "users" ALTER COLUMN "isActive" DROP NOT NULL`);
        await queryRunner.query(`ALTER TABLE "users" ALTER COLUMN "role" DROP NOT NULL`);
        await queryRunner.query(`CREATE TYPE "public"."user_role_enum_old" AS ENUM('admin', 'user')`);
        await queryRunner.query(`ALTER TABLE "users" ALTER COLUMN "role" DROP DEFAULT`);
        await queryRunner.query(`ALTER TABLE "users" ALTER COLUMN "role" TYPE "public"."user_role_enum_old"[] USING "role"::"text"::"public"."user_role_enum_old"[]`);
        await queryRunner.query(`ALTER TABLE "users" ALTER COLUMN "role" SET DEFAULT ARRAY['user'`);
        await queryRunner.query(`DROP TYPE "public"."users_role_enum"`);
        await queryRunner.query(`ALTER TYPE "public"."user_role_enum_old" RENAME TO "user_role_enum"`);
        await queryRunner.query(`ALTER TABLE "users" ALTER COLUMN "isVerified" DROP NOT NULL`);
        await queryRunner.query(`ALTER TABLE "users" DROP COLUMN "password"`);
        await queryRunner.query(`ALTER TABLE "users" ADD "password" character varying(255) NOT NULL`);
        await queryRunner.query(`ALTER TABLE "users" DROP CONSTRAINT "UQ_fe0bb3f6520ee0469504521e710"`);
        await queryRunner.query(`ALTER TABLE "users" DROP COLUMN "username"`);
        await queryRunner.query(`ALTER TABLE "users" ADD "username" character varying(255) NOT NULL`);
        await queryRunner.query(`ALTER TABLE "users" ADD CONSTRAINT "users_username_key" UNIQUE ("username")`);
        await queryRunner.query(`ALTER TABLE "users" DROP CONSTRAINT "UQ_97672ac88f789774dd47f7c8be3"`);
        await queryRunner.query(`ALTER TABLE "users" DROP COLUMN "email"`);
        await queryRunner.query(`ALTER TABLE "users" ADD "email" character varying(255) NOT NULL`);
        await queryRunner.query(`ALTER TABLE "users" ADD CONSTRAINT "users_email_key" UNIQUE ("email")`);
        await queryRunner.query(`ALTER TABLE "group_invitations" DROP COLUMN "updatedAt"`);
        await queryRunner.query(`ALTER TABLE "group_invitations" DROP COLUMN "createdAt"`);
        await queryRunner.query(`ALTER TABLE "group_invitations" DROP COLUMN "message"`);
        await queryRunner.query(`ALTER TABLE "group_invitations" DROP COLUMN "invitedByUserId"`);
        await queryRunner.query(`ALTER TABLE "group_invitations" DROP COLUMN "invitedUserId"`);
        await queryRunner.query(`ALTER TABLE "group_members" DROP COLUMN "role"`);
        await queryRunner.query(`DROP TYPE "public"."group_members_role_enum"`);
        await queryRunner.query(`ALTER TABLE "group_invitations" ADD "expiresAt" TIMESTAMP DEFAULT (now() + '7 days')`);
        await queryRunner.query(`ALTER TABLE "group_invitations" ADD "respondedAt" TIMESTAMP`);
        await queryRunner.query(`ALTER TABLE "group_invitations" ADD "invitedAt" TIMESTAMP DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "group_invitations" ADD "inviteeEmail" character varying(255) NOT NULL`);
        await queryRunner.query(`ALTER TABLE "group_invitations" ADD "inviterId" uuid`);
        await queryRunner.query(`ALTER TABLE "group_members" ADD "isLeader" boolean DEFAULT false`);
        await queryRunner.query(`ALTER TABLE "group_members" ADD CONSTRAINT "group_members_groupId_userId_key" UNIQUE ("groupId", "userId")`);
        await queryRunner.query(`CREATE INDEX "idx_study_groups_isactive" ON "study_groups" ("isActive") `);
        await queryRunner.query(`CREATE INDEX "idx_study_groups_leaderid" ON "study_groups" ("leaderId") `);
        await queryRunner.query(`CREATE INDEX "idx_group_invitations_status" ON "group_invitations" ("status") `);
        await queryRunner.query(`CREATE INDEX "idx_group_invitations_inviteeemail" ON "group_invitations" ("inviteeEmail") `);
        await queryRunner.query(`CREATE INDEX "idx_group_invitations_groupid" ON "group_invitations" ("groupId") `);
        await queryRunner.query(`CREATE INDEX "idx_group_members_userid" ON "group_members" ("userId") `);
        await queryRunner.query(`CREATE INDEX "idx_group_members_groupid" ON "group_members" ("groupId") `);
        await queryRunner.query(`CREATE INDEX "idx_tokens_userid" ON "tokens" ("userId") `);
        await queryRunner.query(`CREATE INDEX "idx_users_username" ON "users" ("username") `);
        await queryRunner.query(`CREATE INDEX "idx_users_email" ON "users" ("email") `);
        await queryRunner.query(`ALTER TABLE "study_groups" ADD CONSTRAINT "study_groups_leaderId_fkey" FOREIGN KEY ("leaderId") REFERENCES "users"("id") ON DELETE SET NULL ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "group_invitations" ADD CONSTRAINT "group_invitations_inviterId_fkey" FOREIGN KEY ("inviterId") REFERENCES "users"("id") ON DELETE SET NULL ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "group_invitations" ADD CONSTRAINT "group_invitations_groupId_fkey" FOREIGN KEY ("groupId") REFERENCES "study_groups"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "group_invitations" ADD CONSTRAINT "fk_invitee_email" FOREIGN KEY ("inviteeEmail") REFERENCES "users"("email") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "group_members" ADD CONSTRAINT "group_members_userId_fkey" FOREIGN KEY ("userId") REFERENCES "users"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "group_members" ADD CONSTRAINT "group_members_groupId_fkey" FOREIGN KEY ("groupId") REFERENCES "study_groups"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "tokens" ADD CONSTRAINT "tokens_userId_fkey" FOREIGN KEY ("userId") REFERENCES "users"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
    }

}
